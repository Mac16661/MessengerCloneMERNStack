{"version":3,"sources":["Message.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","instance","axios","create","baseURL","pusher","Pusher","cluster","App","useState","input","setInput","messages","setMessages","setUsername","sync","a","get","then","res","data","useEffect","subscribe","bind","console","log","prompt","src","alt","FormControl","Input","placeholder","value","onChange","e","target","IconButton","disabled","onClick","preventDefault","post","timestamp","Date","now","type","map","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"sYAuBeA,G,MAnBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,KALL,IAK2DF,EAAQA,gB,0CCRxEU,E,OALEC,EAAMC,OAAO,CAE1BC,QAAS,gD,QCMPC,EAAS,I,OAAIC,GAAO,uBAAwB,CAChDC,QAAS,QAyEIC,MArEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOhB,EAAP,KAAiBqB,EAAjB,KAIMC,EAAI,uCAAG,sBAAAC,EAAA,sEACLd,EAAMe,IAAI,0BACfC,MAAK,SAACC,GAELN,EAAYM,EAAIC,SAJP,2CAAH,qDAqCV,OA7BAC,qBAAU,WACRN,MACA,IAEFM,qBAAU,WACQhB,EAAOiB,UAAU,YACzBC,KAAK,eAAe,SAASH,GAEnCI,QAAQC,IAAIL,GACZL,SAEF,CAACtB,IAEH4B,qBAAU,WACRP,EAAYY,OAAO,6BAClB,IAeD,yBAAKhC,UAAU,OACb,yBAAKiC,IAAI,6FAA6FC,IAAI,mBAC1G,uCAAanC,GAEb,0BAAMC,UAAU,aACd,kBAACmC,EAAA,EAAD,CAAanC,UAAU,oBACrB,kBAACoC,EAAA,EAAD,CAAOpC,UAAU,aAAaqC,YAAY,qBAAqBC,MAAOtB,EAAOuB,SAAU,SAACC,GAAD,OAAOvB,EAASuB,EAAEC,OAAOH,UAChH,kBAACI,EAAA,EAAD,CAAY1C,UAAU,kBAAkBK,QAAQ,OAAOD,MAAM,UAAUuC,UAAW3B,EAAO4B,QApB7E,SAACJ,GACnBA,EAAEK,iBAEFrC,EAAMsC,KAAK,gBAAiB,CAC1B/C,SAAUA,EACVF,QAASmB,EACT+B,UAAWC,KAAKC,QAGlBhC,EAAS,KAW4GiC,KAAK,UAClH,kBAAC,IAAD,SAKN,kBAAC,IAAD,KAEIhC,EAASiC,KAAK,SAAAtD,GAAO,OACnB,kBAAC,EAAD,CAASuD,IAAKvD,EAAQwD,IAAKxD,QAASA,EAASE,SAAUA,UChE/CuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMzE,c","file":"static/js/main.261dccf0.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport './Message.css'\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n    const isUser = username === message.username\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'}`} >\r\n            <Card className={isUser ? 'message__userCard' : 'message__guestCard'}>\r\n                <CardContent>\r\n                    <Typography\r\n                        color='white'\r\n                        variant='h5'\r\n                        component='h2'\r\n                    >\r\n                        {!isUser && `${message.username || 'Unknown user'}:`} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:9000'\r\n    baseURL: 'https://mern-messenger-live1.herokuapp.com/'\r\n});\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core'\r\nimport Message from './Message';\r\nimport FlipMove from 'react-flip-move'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport axios from './axios.js';\r\nimport Pusher from 'pusher-js';\r\n\r\nconst pusher = new Pusher('33ee0bbb9df78837c49e', {\r\n  cluster: 'ap2'\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState('')\r\n  const [messages, setMessages] = useState([])\r\n  const [username, setUsername] = useState('')\r\n\r\n\r\n  //fetching from localhost 9000\r\n  const sync = async() => {\r\n    await axios.get('/retrieve/conversation')\r\n    .then((res) => {\r\n      // console.log(res.data);\r\n      setMessages(res.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    sync()\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    const channel = pusher.subscribe('messages');\r\n    channel.bind('newMessages', function(data) {\r\n      // alert(JSON.stringify(data));\r\n      console.log(data)  //TODO: data here is sending me the actual changes I should push this to setMessages to make it efficient\r\n      sync() //by doing this we are reloading the app\r\n    });\r\n  },[username])\r\n\r\n  useEffect(() => {\r\n    setUsername(prompt('Please enter your name'))\r\n  }, [])\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault()\r\n\r\n    axios.post('/save/message', {\r\n      username: username,\r\n      message: input,\r\n      timestamp: Date.now(),\r\n    })\r\n\r\n    setInput('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" alt=\"messenger logo\" />\r\n      <h2>Welcome {username}</h2>\r\n\r\n      <form className='app__form' >\r\n        <FormControl className='app__formControl' >\r\n          <Input className='app__input' placeholder='Enter a message...' value={input} onChange={(e) => setInput(e.target.value)} />\r\n          <IconButton className='app__iconButton' variant='text' color='primary' disabled={!input} onClick={sendMessage} type=\"submit\" >\r\n            <SendIcon />\r\n          </IconButton>\r\n        </FormControl>\r\n      </form>\r\n\r\n      <FlipMove>\r\n        {\r\n          messages.map( message => (\r\n            <Message key={message._id} message={message} username={username} />\r\n          ))\r\n        }\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}